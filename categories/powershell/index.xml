<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Powershell - Category - Kamil Procyszyn</title><link>https://kprocyszyn.github.io/categories/powershell/</link><description>Powershell - Category - Kamil Procyszyn</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Kamil Procyszyn</copyright><lastBuildDate>Wed, 04 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://kprocyszyn.github.io/categories/powershell/" rel="self" type="application/rss+xml"/><item><title>PowerShell Switch Statement - Different take on branching</title><link>https://kprocyszyn.github.io/powershell-switch-statement/</link><pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://kprocyszyn.github.io/powershell-switch-statement/</guid><description>One switch statement can replace multiple if/else statements, it makes code more readable and is really easy to use - there&amp;rsquo;s no reason why you shouldn&amp;rsquo;t give it a try!
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 # Link to the video: https://youtu.</description></item><item><title>PowerShell For loop</title><link>https://kprocyszyn.github.io/powershell-for-loop/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://kprocyszyn.github.io/powershell-for-loop/</guid><description>For loop - do you actually need it, since there&amp;rsquo;s foreach loop? Turns out, yes - there are situations where for loop comes very handy.
In this video I&amp;rsquo;ll show you the basic syntax of the for loop, going through nested for loops to end up with real case scenario from Azure Application Insights.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 # Link to the video: https://youtu.</description></item><item><title>PowerShell If statement - controlling the flow of your code</title><link>https://kprocyszyn.github.io/powershell-if-statement/</link><pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://kprocyszyn.github.io/powershell-if-statement/</guid><description>In this video we are exploring how to use If statement in various scenarios. If statement allows you to take tide control over the execution of your code, by dictating your script what to do in a given situation.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 # Link to the video: https://youtu.</description></item><item><title>Restarting VSS Writers with PowerShell script</title><link>https://kprocyszyn.github.io/restarting-vss-writers-with-powershell-script/</link><pubDate>Sun, 01 Dec 2019 18:27:18 +0000</pubDate><author>Author</author><guid>https://kprocyszyn.github.io/restarting-vss-writers-with-powershell-script/</guid><description>&lt;div class="featured-image">
&lt;img src="/wp-content/uploads/2019/12/jason-yu-qpZFTRM-Bec-unsplash.jpg" referrerpolicy="no-referrer">
&lt;/div>VSS Writers are responsible for backups – if they stop working, then backups might fail. The solution to that is restarting VSS Writers, but the problem here is that there are many, and at least out of the box, there’s no mechanism to make this automatic… but there’s PowerShell.
I’m not interested in your code, I just want to restart these VSS Writers In that case, head on to: mygithub, use the code and run:</description></item><item><title>Resolve IP and DNS with Powershell tool</title><link>https://kprocyszyn.github.io/powershell-tool-resolve-ip-and-dns/</link><pubDate>Sun, 29 Apr 2018 21:40:00 +0000</pubDate><author>Author</author><guid>https://kprocyszyn.github.io/powershell-tool-resolve-ip-and-dns/</guid><description>&lt;div class="featured-image">
&lt;img src="/wp-content/uploads/2018/04/jungwoo-hong-100345-unsplash.jpg" referrerpolicy="no-referrer">
&lt;/div>I’ve been asked to prepare a simple tool which would:
Resolve IP address or DNS Return all results to table Import addresses from a file The reason behind was to check how IP/DNS records change over the period of time, therefore there was a need for something like that:
A file with all addresses in question Tool which could import all these addresses and resolve them Save the results into a new file Once having at least a couple of files, the results could be compared.</description></item><item><title>Powershell – resolve full names to usernames from CSV file</title><link>https://kprocyszyn.github.io/powershell-resolve-full-names-usernames-csv-file/</link><pubDate>Sat, 21 Oct 2017 14:03:58 +0000</pubDate><author>Author</author><guid>https://kprocyszyn.github.io/powershell-resolve-full-names-usernames-csv-file/</guid><description>It’s unbelievable how long it took me to figure out this simple Powershell script, but yet it does the trick :).
Often you receive a request to do a certain action with a bunch of accounts, and (obviously) the list provided contains the full names rather usernames. Pain to do it manually, but yet we can utilise Powershell here.
What you need: CSV file, with only one column, and the header of the column must be called “Name”, if you prefer to use something different, simply amend Name in line 6 to reflect your header.</description></item></channel></rss>