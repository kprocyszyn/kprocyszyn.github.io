<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Kamil Procyszyn</title><link>https://kprocyszyn.github.io/</link><description>Sysadmin's point of view</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Kamil Procyszyn</copyright><lastBuildDate>Mon, 23 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://kprocyszyn.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>PowerShell Array and ArrayList - storing multiple items as a one variable</title><link>https://kprocyszyn.github.io/powershell-array-and-arraylist/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://kprocyszyn.github.io/powershell-array-and-arraylist/</guid><description>Array is a basic data structure that allows to store multiple items in one variable. In this short video, I&amp;rsquo;ll show you how to create a basic array, populate it with items, how to add, access and modify items within array.
In addition, I&amp;rsquo;ll present to you how to use ArrayList - which is much more flexible array, especially for adding more items.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 # Link to the video: https://youtu.</description></item><item><title>PowerShell Switch Statement - Different take on branching</title><link>https://kprocyszyn.github.io/powershell-switch-statement/</link><pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://kprocyszyn.github.io/powershell-switch-statement/</guid><description>One switch statement can replace multiple if/else statements, it makes code more readable and is really easy to use - there&amp;rsquo;s no reason why you shouldn&amp;rsquo;t give it a try!
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 # Link to the video: https://youtu.</description></item><item><title>PowerShell For loop</title><link>https://kprocyszyn.github.io/powershell-for-loop/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://kprocyszyn.github.io/powershell-for-loop/</guid><description>For loop - do you actually need it, since there&amp;rsquo;s foreach loop? Turns out, yes - there are situations where for loop comes very handy.
In this video I&amp;rsquo;ll show you the basic syntax of the for loop, going through nested for loops to end up with real case scenario from Azure Application Insights.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 # Link to the video: https://youtu.</description></item><item><title>PowerShell If statement - controlling the flow of your code</title><link>https://kprocyszyn.github.io/powershell-if-statement/</link><pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://kprocyszyn.github.io/powershell-if-statement/</guid><description>In this video we are exploring how to use If statement in various scenarios. If statement allows you to take tide control over the execution of your code, by dictating your script what to do in a given situation.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 # Link to the video: https://youtu.</description></item><item><title>Managing Software with Chocolatey - Automate installation and updates of your applications</title><link>https://kprocyszyn.github.io/managing-software-with-chocolatey/</link><pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://kprocyszyn.github.io/managing-software-with-chocolatey/</guid><description>Software management is not trivial task. Preparing for silent deployment is challenging, and even if you manage to install the application, how to keep it up to date?
Chocolatey is package manager for Windows, that can fully automate lifecycle of your software.
In this video, I&amp;rsquo;ll show you how to install Chocolatey, then how to find software, install it and finally keeping it up to date - all coming with free open-source license.</description></item><item><title>PowerShell for IT Professionals [#20] – Next Steps with PowerShell</title><link>https://kprocyszyn.github.io/powershell-for-it-professionals-20-next-steps-with-powershell/</link><pubDate>Thu, 26 Nov 2020 17:46:00 +0000</pubDate><author>Author</author><guid>https://kprocyszyn.github.io/powershell-for-it-professionals-20-next-steps-with-powershell/</guid><description>&lt;div class="featured-image">
&lt;img src="/wp-content/uploads/2020/11/Slide1-2.jpg" referrerpolicy="no-referrer">
&lt;/div>Congratulations! This is 20th and last lesson in the course – and my aim here is to show you various paths you can take your PowerShell journey to.
I’m going to show what else you can do within PowerShell itself, as well how to keep up-to-day plus – what other doors writing code has opened for you – I’d love to hear back about this!
I hope you’ve enjoyed the course so far and it will be helped you in some way – either solve a problem, got promotion, or simply learnt something new.</description></item><item><title>PowerShell for IT Professionals [#19] – Websites and APIs</title><link>https://kprocyszyn.github.io/powershell-for-it-professionals-19-websites-and-apis/</link><pubDate>Sun, 15 Nov 2020 20:57:20 +0000</pubDate><author>Author</author><guid>https://kprocyszyn.github.io/powershell-for-it-professionals-19-websites-and-apis/</guid><description>&lt;div class="featured-image">
&lt;img src="/wp-content/uploads/2020/11/Slide1-1.jpg" referrerpolicy="no-referrer">
&lt;/div>PowerShell is a great server automation tool, but what about Internet and any other web served services?
As it turns out, PowerShell is great in scrapping websites and consuming APIs – and it’s been one of the main development areas of the tool in the last couple of years.
In this lesson we are going to see how to use PowerShell to download files, scrap websites, discover links.</description></item><item><title>PowerShell for IT Professionals [#18] – Working with text strings</title><link>https://kprocyszyn.github.io/powershell-for-it-professionals-18-working-with-text-strings/</link><pubDate>Tue, 03 Nov 2020 17:33:18 +0000</pubDate><author>Author</author><guid>https://kprocyszyn.github.io/powershell-for-it-professionals-18-working-with-text-strings/</guid><description>&lt;div class="featured-image">
&lt;img src="/wp-content/uploads/2020/11/Slide1.jpg" referrerpolicy="no-referrer">
&lt;/div>Although PowerShell treats everything as object – including text strings – working with text might be particularly difficult – at least when first approached.
In this lesson we are going to have a closer look at what is possible with built in text methods and see how these can help us e.g. by extracting a substring of text.
PowerShell can also be great at parsing log files – we will use Select-String to quickly filter out the lines of text with the phrase we are looking for e.</description></item><item><title>PowerShell for IT Professionals [#17] – Scripting part 4 – parameters, running remotely and formatting</title><link>https://kprocyszyn.github.io/powershell-for-it-professionals-17-scripting-part-4-parameters-running-remotely-and-formatting/</link><pubDate>Mon, 19 Oct 2020 18:32:20 +0000</pubDate><author>Author</author><guid>https://kprocyszyn.github.io/powershell-for-it-professionals-17-scripting-part-4-parameters-running-remotely-and-formatting/</guid><description>&lt;div class="featured-image">
&lt;img src="/wp-content/uploads/2020/10/Writing-first-script-pt4.jpg" referrerpolicy="no-referrer">
&lt;/div>In the last part of scripting series, we will make the script to be able to query remote machines, e.g. servers.
We will also check how to add parameters to the script (and configure the default value of parameter) so that user will able to pass the parameter name like in a standard PowerShell cmdlet.
Finally, we are going to format the script so that it looks more reliable and make some refactoring so that the logic is simpler.</description></item><item><title>PowerShell for IT Professionals [#16] – Scripting part 3 – Add-Member and network</title><link>https://kprocyszyn.github.io/powershell-for-it-professionals-16-scripting-part-3-add-member-and-network/</link><pubDate>Tue, 13 Oct 2020 19:12:40 +0000</pubDate><author>Author</author><guid>https://kprocyszyn.github.io/powershell-for-it-professionals-16-scripting-part-3-add-member-and-network/</guid><description>&lt;div class="featured-image">
&lt;img src="/wp-content/uploads/2020/10/Writing-first-script-pt3.jpg" referrerpolicy="no-referrer">
&lt;/div>In this lesson we are taking our script further by adding details about IP configuration and last installed hotfixes.
But it turns out, the networking information is not that shallow as it seems at the first glance – thus I’ll show you how to retrieve the information from the configuration.
We will also look on how to reuse our already created object so that we don’t need to duplicate code.</description></item></channel></rss>